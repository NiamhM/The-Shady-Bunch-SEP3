import java.io.*;
import java.util.*;
public class PreferenceTable {
	private static Random RND = new Random();
	static Hashtable<String, StudentEntry> studentLookup = new Hashtable<String, StudentEntry>();
	private static Vector<Vector<String>> v1 = new Vector<Vector<String>>();
	public PreferenceTable() {//empty constructor
		
	}
	
	public PreferenceTable(String filename) throws IOException{ //constructor
		String preferencefile = filename;
		LoadContentFromFile(preferencefile);
	}
	
	public static Vector<Vector<String>> getVector()
	{
		return v1;
	}

	public static StudentEntry getRandomStudent(){
		int randStu = RND.nextInt(51);
		Vector<String> randVec = v1.elementAt(randStu);
		String randName = randVec.firstElement();
		return getEntryFor(randName);
	}
	
	public static String getRandomPreference(StudentEntry Se){
		Vector<String> tempVec = Se.getOrderedPreference();//get all the students preferences
		int randPref = RND.nextInt(tempVec.size());
		return tempVec.elementAt(randPref);//find a random one
	}
	
	private Vector<Vector<String>> LoadContentFromFile(String filename) throws IOException{
		FileInputStream file = null;
		
		try{
			file = new FileInputStream(filename);		
		} catch(FileNotFoundException e){
			System.err.println("Error: File not found");
			e.printStackTrace(); //shows where the error took place
		}
		
		BufferedReader in = new BufferedReader(new InputStreamReader(file));
		String line;
		int numTokens =0;
		while ((line = in.readLine()) != null) //while there is another line
		{
			
			Vector<String> linevector = new Vector<String>();
			v1.add(linevector);// add the vector of the line to the main vector of vectors
			StringTokenizer tokens = new StringTokenizer(line, "\t");
			while (tokens.hasMoreTokens())
			{
				String next = tokens.nextToken();
				linevector.addElement(next);//add the line to the vector
			}
			numTokens = tokens.countTokens();
		}
		v1.removeElementAt(0);
		return v1;	
	}
	
	public Hashtable<String, StudentEntry> getAllStudentEntries()
	{
		return studentLookup;
	}
	
	public static StudentEntry getEntryFor(String sName)
	{
		try{
			StudentEntry newStudent = (StudentEntry) studentLookup.get(sName);
			return newStudent;
		}
		catch(NullPointerException e){
			return null;
		}
	}
	
	public static void fillPreferencesofAll(int maxPrefs){
		int neededPrefs;
		for (Vector<String>row : v1){
			StudentEntry tempstu = studentLookup.get(row.elementAt(0));
			if(!(tempstu.hasPreassignedProject())){
				neededPrefs = maxPrefs - tempstu.getNumberOfStatedPreferences();
				int i = 0;
				while (i< neededPrefs){
					String possiblePref = StudentEntry.getRandomPreference();
					if (!(tempstu.hasPreference(possiblePref))){//if the studentEntry does not contain the preference, add it
						tempstu.addProject(possiblePref);
						i++;
					}

				}
				//System.out.println(tempstu.getStudentName() + " Preferences full");
				//can print as each students preferences are filled
			}
		}
//		for(int i=0; i<studentLookup.size(); i++){
//			StudentEntry tempstu = studentLookup.get(i);
//		}
	}
	
	public static void main(String [] args) throws IOException
	{
		String[] preferences = new String[10];
		PreferenceTable prefTable = new PreferenceTable("Project_allocation_data.tsv"); //create new instance of preferenceTable
			StudentEntry newStudent = null;
			int i = 0;
			for(Vector<String>row : v1)
			{
					String stname = row.elementAt(0);
					studentLookup.put(stname, new StudentEntry(stname));
			}
			
			newStudent = getEntryFor("Severus Snape");
			System.out.println(newStudent.getStudentName());
			System.out.println(newStudent.getOrderedPreference());
			if(newStudent.preassignProject())
				System.out.println("Passed");
			else
				System.out.println("preassign Failed");
			if(newStudent.hasPreassignedProject())
				System.out.println("has preassigned");
			else
				System.out.println("hasPreassigned Failed");
			System.out.println("Number of preferences = " + newStudent.getNumberOfStatedPreferences());
			newStudent.addProject("Killing Dumbledore");
			System.out.println(newStudent.getOrderedPreference());
			System.out.println("Random Preference:" + getRandomPreference(newStudent));
			StudentEntry randStu = getRandomStudent();
			System.out.println("Random Student: " + randStu.getStudentName());
			System.out.println("StudentEntry getRandomPreference: " + StudentEntry.getRandomPreference());
			if (newStudent.hasPreference("Killing Dumbledore"))
				System.out.println(newStudent.getStudentName() + " Contains The preference");
			else
				System.out.println(newStudent.getStudentName() + " Does not Contain the preference");
			fillPreferencesofAll(10);
			CandidateSolution sol = new CandidateSolution(prefTable);
			CandidateAssignment cand = sol.getAssignmentFor("Jesus Christ");
			int energy = cand.getEnergy();
			System.out.println(energy);
			System.out.println("sol.getRanking = " + sol.getRanking());
			System.out.println("sol.getFitness = " + sol.getFitness());
			CandidateSolution comparisonSol = new CandidateSolution(prefTable);
			System.out.println("comparisonSol.getRanking = " + comparisonSol.getRanking());
			System.out.println("Assignment for Jesus Christ: " + sol.getAssignmentFor("Jesus Christ"));
			System.out.println("Random Assignment: " + sol.getRandomAssignment());
			System.out.println(newStudent.getRanking("Route Visualization for Indoor Navigation"));
	}
	
	
}
