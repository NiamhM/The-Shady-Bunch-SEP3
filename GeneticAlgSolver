import java.util.Collections;
import java.util.Random;
import java.util.Vector;

class GeneticAlgSolver {
	
	private Vector<CandidateSolution> population = new Vector<CandidateSolution>();
	private static final int POPULATION_SIZE = 1000; 
	Random randomNumber = new Random();
	PopUpWindow popUp = new PopUpWindow(); //progress indicator
	
	public GeneticAlgSolver(PreferenceTable p){
		for(int i = 0; i< POPULATION_SIZE; i++){
			population.add(new CandidateSolution(p));
		}
	}
	
	public void sort(){
		Collections.sort(population, (x,y) -> y.compareTo(x));
	}
	
	private void combine(){
		int newSize = population.size();
		int alphaMembers = newSize/10;
		population.subList(newSize-alphaMembers,newSize).clear(); //culling last 10%
		newSize = population.size();
		for(int j = 0; j< alphaMembers; j++){
			int randomWorstSolution = randomNumber.nextInt(alphaMembers); //getting a random number between 1 and 100
			randomWorstSolution = randomWorstSolution + (newSize-alphaMembers); //shifting number to the end of the the list
			CandidateSolution first = population.get(j);
			CandidateSolution second = population.get(randomWorstSolution);
			CandidateSolution newSolution = first.combineSolutions(second);
			population.add(newSolution);
		}
	}	
	public CandidateSolution run(){
		for(int i = 0; i < 1000; i++){
			if(i % 100 == 0){
				int num = i/10;
				popUp.popUp(num);
			}
			sort();
			combine();
		}
		sort();
		return population.firstElement();
	}
	
	public int getEnergy(){
		return population.firstElement().getEnergy();
	}
	
	public Vector<CandidateSolution> getPopulation(){
		return population;
	}
}
