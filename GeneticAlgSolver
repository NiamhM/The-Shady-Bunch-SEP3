import java.util.Collections;
import java.util.Random;
import java.util.Vector;
import java.awt.Color;
import javax.swing.JFrame;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;

public class GeneticAlgSolver {//extends AglorithmSolver {
	
	private Vector<CandidateSolution> population = new Vector<CandidateSolution>();
	private static final int POPULATION_SIZE = 1000; 
	Random randomNumber = new Random();
	
	public GeneticAlgSolver(PreferenceTable p){
		for(int i = 0; i< POPULATION_SIZE; i++){
			population.add(new CandidateSolution(p));
		}
	}
	public void sort(){
		Collections.sort(population, (x,y) -> y.compareTo(x));
	}
	
	private void combine(){
		int newSize = population.size();
		int topTenPC = newSize/10;
		population.subList(newSize-topTenPC,newSize).clear(); //culling last 10%
		newSize = population.size();
		for(int j = 0; j< topTenPC; j++){
			int betaNum = randomNumber.nextInt(topTenPC);
			betaNum = betaNum + (newSize-topTenPC);
			CandidateSolution first = population.get(j);
			CandidateSolution second = population.get(betaNum);
			CandidateSolution newSolution = first.combineSolutions(second);
			population.add(newSolution);
		}
	}	
	public CandidateSolution run(){
		for(int i = 0; i < 1000; i++){
			sort();
			System.out.println(i+"th Time");
			combine();
		}
		return population.firstElement();
	}
	
	public int getEnergy(){
		return population.firstElement().getEnergy();
	}
	
	public Vector<CandidateSolution> getPopulation(){
		return population;
	}
}
