
import java.util.Hashtable;
import java.util.Vector;

public class CandidateSolution {
	PreferenceTable pref;
	private Vector<CandidateAssignment> allCandidates = new Vector<CandidateAssignment>();
	private static final int DUPLICATE_PROJECT_PENALTY = 1000;
	public CandidateSolution(PreferenceTable p){
		pref  = p;
		Vector<Vector<String>> allPrefs = PreferenceTable.getPrefTable(); 
		for(Vector<String> line : allPrefs){ 		//create hash table in preferenceTable
			pref.addToHash(line.firstElement());	//need hash to use getAllStudentEntries
		}
		
		Vector<StudentEntry> studentEntryList = pref.getAllStuderntEntries();
		for(StudentEntry student : studentEntryList){		//creating list of candidate assignments
			CandidateAssignment cand = new CandidateAssignment(student);
			allCandidates.addElement(cand);
		}
	}
	
	public String getAssignmentFor(String studentName){
		Hashtable<String, StudentEntry> myHash = pref.getHashtable();
		StudentEntry student = myHash.get(studentName);
		String assignment = "";
		for(CandidateAssignment can : allCandidates){
			if(can.getStudentEntry().equals(student)){
				assignment = can.getAssignedProject();
			}
		}
		return assignment;
	}
	
	public String getRandomAssignment(){
		StudentEntry randStudent = pref.getRandomStudent();
		return getAssignmentFor(randStudent.getStudentName());
	}
	
	public int getEnergy(){
		int energy = 0;
		int penalty = 0;
		String project;
		Hashtable<StudentEntry,String> hash = new Hashtable<StudentEntry,String>();
		
		for(CandidateAssignment cand: allCandidates){
			energy = energy + cand.getEnergy();
			project = cand.getAssignedProject();
			if(hash.containsValue(project)){ 
				penalty = penalty + DUPLICATE_PROJECT_PENALTY;
			}
			hash.put(cand.getStudentEntry(), cand.getAssignedProject());
		}
		energy = energy + penalty;
		return energy;
	}
	
	public int getFitness(){
		int energy = getEnergy();
		int fitness = energy*(-1);
		return fitness;
	}
	public int compareTo(CandidateSolution other){
		if(this.getEnergy() == other.getEnergy()){
			return 0;
		}else if(this.getEnergy() < other.getEnergy()){
			return 1;
		}
		else if(this.getEnergy() > other.getEnergy()){
			return -1;
		}
		return 0;
	}
	
	public CandidateSolution combineSolutions(CandidateSolution secondCandidate){
		CandidateSolution combinedCandidates = new CandidateSolution(pref);
		combinedCandidates.allCandidates.clear();
		for(int i = 0; i < allCandidates.size(); i++){
						
			CandidateAssignment tempAssignment = allCandidates.get(i);
			CandidateAssignment tempAssignment2 = secondCandidate.allCandidates.get(i);
			
			int energyForFirst = tempAssignment.getEnergy();
			int energyForSecond = tempAssignment2.getEnergy();
			
			if(energyForFirst > energyForSecond){
				combinedCandidates.allCandidates.add(tempAssignment);
			}
			else if(energyForSecond > energyForFirst){
				combinedCandidates.allCandidates.add(tempAssignment2);			
			}
			else{
				combinedCandidates.allCandidates.add(tempAssignment);
			}
		}		
		return combinedCandidates;
	}
}
