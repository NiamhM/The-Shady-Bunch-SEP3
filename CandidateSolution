
import java.util.Hashtable;
import java.util.Random;
import java.util.Vector;

public class CandidateSolution {
	PreferenceTable preferenceTable;
	private Vector<String> studentsAssignedUnlistedProject = new Vector<String>();
	private Vector<CandidateAssignment> allCandidates = new Vector<CandidateAssignment>();
	private static final int DUPLICATE_PROJECT_PENALTY = 1000;
	Random randomNumber = new Random();
	
	public CandidateSolution(PreferenceTable p){
		preferenceTable  = p;
		//preferenceTable.getHashtable();
		Vector<StudentEntry> studentEntryList = preferenceTable.getAllStuderntEntries();
		for(StudentEntry student : studentEntryList){		//creating list of candidate assignments
			CandidateAssignment cand = new CandidateAssignment(student);
			allCandidates.addElement(cand);
		}
	}
	
	public Vector<String> findUnlistedAssignments (){
		for (CandidateAssignment cand : allCandidates){
			StudentEntry student = cand.getStudentEntry();
			if (!(student.getOriginalPreferences().contains(cand.getAssignedProject()))){
				studentsAssignedUnlistedProject.add(student.getStudentName());
			}
		}
		return studentsAssignedUnlistedProject;
	}
	
	public String getAssignmentFor(String studentName){
		Hashtable<String, StudentEntry> myHash = preferenceTable.getHashtable();
		StudentEntry student = myHash.get(studentName);
		String assignment = "";
		for(CandidateAssignment can : allCandidates){
			if(can.getStudentEntry().equals(student)){
				assignment = can.getAssignedProject();
			}
		}
		return assignment;
	}
	
	public String getRandomAssignment(){
		StudentEntry randomStudent = preferenceTable.getRandomStudent();
		return getAssignmentFor(randomStudent.getStudentName());
	}
	
	public int getEnergy(){
		int energy = 0;
		int penalty = 0;
		String project;
		Vector<String> projectsAssigned = new Vector<String>();
		
		for(CandidateAssignment cand: allCandidates){
			energy = energy + cand.getEnergy();
			project = cand.getAssignedProject();
			if(projectsAssigned.contains(project)){
				penalty += DUPLICATE_PROJECT_PENALTY;
			}
			projectsAssigned.add(cand.getAssignedProject());
		}
		return energy + penalty;
	}
	
	public int getFitness(){
		int energy = getEnergy();
		int fitness = energy*(-1);
		return fitness;
	}
	public int compareTo(CandidateSolution other){
		if(this.getEnergy() == other.getEnergy()){
			return 0;
		}else if(this.getEnergy() < other.getEnergy()){
			return 1;
		}
		else if(this.getEnergy() > other.getEnergy()){
			return -1;
		}
		return 0;
	}
	
	public CandidateSolution combineSolutions(CandidateSolution secondCandidate){
		CandidateSolution newCandidate = new CandidateSolution(preferenceTable);
		newCandidate.allCandidates.clear();
		int energyOne;
		int energyTwo;
		for(int i = 0; i < allCandidates.size(); i++){
			CandidateAssignment tempAssignment = allCandidates.get(i);
			CandidateAssignment tempAssignment2 = secondCandidate.allCandidates.get(i);
			newCandidate.allCandidates.add(tempAssignment);
			energyOne = newCandidate.getEnergy();
			newCandidate.allCandidates.remove(tempAssignment);
			newCandidate.allCandidates.add(tempAssignment2);
			energyTwo = newCandidate.getEnergy();
			if(energyOne < energyTwo){
				newCandidate.allCandidates.remove(tempAssignment2);
				newCandidate.allCandidates.add(tempAssignment);
			}
		}		
		return newCandidate;
	}
	
	public Vector<CandidateAssignment> getAllCandiates(){
		return allCandidates;
	}
}
