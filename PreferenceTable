import java.io.*;
import java.lang.reflect.Array;
import java.util.*;

import javax.swing.text.html.StyleSheet.ListPainter;
public class PreferenceTable {

	private static Vector<Vector<String>> fileContents; 
	private static Hashtable<String, StudentEntry> studentDetails = new Hashtable<String, StudentEntry>();
	private Random RND = new Random();
	private BufferedReader bRead;
	private static Vector<String> preassignedList = new Vector<String>();
	private static Vector<String> allPreassignedProjects = new Vector<String>();

	public PreferenceTable() { 

	}

	public PreferenceTable(String fileName) /*throws IOException*/ {
		fileContents = loadContentFromFlie(fileName);
				
	}

	public static Vector<Vector<String>> getPrefTable(){
		return fileContents;	
	}

	private Vector<Vector<String>> loadContentFromFlie(String fileName) /*0throws IOException*/ {
		Vector<Vector<String>> myVector = new Vector<Vector<String>>(); //declaring a 2D vector
		String nextLine, nextToken;
		int i=0;

		try{
			FileReader fileReader = new FileReader(fileName);
			bRead = new BufferedReader(fileReader); 
			nextLine = bRead.readLine(); //// added to remove fist line of file
			while((nextLine = bRead.readLine()) != null){ //reads in each line in the file
				StringTokenizer tokens = new StringTokenizer(nextLine, "\t"); //breaks the line into tokens seperated by tabs
				myVector.add(i,new Vector<String>()); //crates 2D vector, adds a vector to each element in the vector

				int numOfTokens = tokens.countTokens();
				for(int j = 0; j  < numOfTokens; j++){
					nextToken = tokens.nextToken().intern();   	//.intern to make strings pointer equvilant 
					myVector.get(i).add(j,nextToken);	//adds next token to column 
				}
				i++;
			}

		} catch (FileNotFoundException e) {
			System.err.println("File Not Found");
			e.printStackTrace(); //prints where error has occurred 
		}catch (IOException e){
			System.err.println("No next line");
			e.printStackTrace();
		}
		return myVector;
	}

	public Vector<StudentEntry> getAllStuderntEntries(){ //returns hash table
		Vector<StudentEntry> allStudentEntries = new Vector<StudentEntry>();
		for(Vector<String> row: fileContents){
			String name = row.firstElement();
			StudentEntry student = (StudentEntry) studentDetails.get(name);
			allStudentEntries.add(student);
		}
		return allStudentEntries;
	}

	public StudentEntry getEntryFor(String sname){
		try{
			StudentEntry student = (StudentEntry) studentDetails.get(sname); //gets StudentEntry from the hash table, reads it into a variale and returns
			return student;
		}
		catch(NullPointerException e){
			return null;
		}
	}

	public StudentEntry getRandomStudent(){
		Vector<StudentEntry> allStudents = getAllStuderntEntries();
		int num = RND.nextInt(allStudents.size());
		StudentEntry randomStudent = allStudents.get(num); 
		return randomStudent;
	}

	public String getRandomPreference(){
		StudentEntry student = getRandomStudent();
		while(student.hasPreassignedProject()){  
			student = getRandomStudent();
		}
		String randomPreference = student.getRandomPreference();
		return randomPreference;
	}

	public void fillPreferencesOfAll(int maxPrefs, TreeMap <String, Integer> map){
		Vector<StudentEntry> allStudents = getAllStuderntEntries();
		for(StudentEntry student: allStudents){
			Vector<String> prefs = student.getOrderedPreference();
			if(student.hasPreassignedProject() == false){ //if they dont have a preassigned project
				while(prefs.size() < maxPrefs){
					int min = 100;
					String leastDesirable = null;
					for(Map.Entry<String,Integer> mapEntry : map.entrySet()) {
						if (!(allPreassignedProjects.contains(mapEntry.getKey()))){
							if(mapEntry.getValue()<min){
								min = mapEntry.getValue();
								map.replace(mapEntry.getKey(), min, min+1);
								leastDesirable = mapEntry.getKey();
							}
						}
					}
				student.addPoject(leastDesirable);
				}
			}	
		}
	}

	public void addToHash(String name){
		studentDetails.put(name, new StudentEntry(name));
	}

	public Hashtable<String, StudentEntry> getHashtable(){
		return studentDetails;
	}

	public TreeMap<String, Integer> getAllProjects(){
		TreeMap<String, Integer> projectPopularity = new TreeMap<String, Integer>();
		Vector<StudentEntry> allStudents = getAllStuderntEntries();
		for (int i=0; i<allStudents.size(); i++){
			Vector<String> selectedPreferences = allStudents.elementAt(i).getOrderedPreference();
			for (int j=0; j<selectedPreferences.size(); j++){
				if (!(projectPopularity.containsKey(selectedPreferences.elementAt(j)))){
					projectPopularity.put((String) selectedPreferences.elementAt(j), 1);
				}
				else{
					int newValue = projectPopularity.get(selectedPreferences.elementAt(j)) +1;
					projectPopularity.replace((String) selectedPreferences.elementAt(j), projectPopularity.get(selectedPreferences.elementAt(j)), newValue);
				}
			}
		}
		Set set = projectPopularity.entrySet();
		// Get an iterator
		Iterator iter = set.iterator();
		// Display elements

		while(iter.hasNext()) {
			Map.Entry me = (Map.Entry)iter.next();
		}
		return projectPopularity;
	}

	public static void makePreassignedProjectList(String pName){
		preassignedList.add(pName);
	}
	
	public static Vector<String> returnPreassignedProjectList(){
		return preassignedList;
	}

	public Vector<String> listProjects(String choice){
		//When the button is pressed it will pass it a choice
		Vector<String> projectList = new Vector<String>();
		projectList.addAll(getAllProjects().keySet()); //Only want the project names
		
		if(choice.equalsIgnoreCase("Preassigned")){
			return preassignedList;
		}
		else if(choice.equalsIgnoreCase("Non-Preassigned")){
			for(int i = 0; i < projectList.size(); i++){
				if(preassignedList.contains(projectList.get(i))){
					projectList.remove(i);
				}
			}
		}
		for(int i = 0; i < projectList.size(); i++){
		}
		return projectList;
	}
	
	public String[] numericalSort(TreeMap<String, Integer> map) {
		String[] keys = new String[map.size()];
		int[] values = new int[map.size()];
		int index = 0;
		for(Map.Entry<String,Integer> mapEntry : map.entrySet()) {
		    keys[index] = mapEntry.getKey();
		    values[index] = mapEntry.getValue();
		    index++;
		}
		for (int i = 0; i < values.length; i++)
		{
		       for(int j = i+1; j < values.length; j++)
		       {
		                if(values[i] > values[j])
		                {
		                       int tempVal = values[j];
		                       values[j]= values[i];
		                       values[i] = tempVal;
		                       
		                       String tempStr = keys[j];
		                       keys[j] = keys[i];
		                       keys[i] = tempStr;
		                }
		       }
		}
		String sortedList[] = new String[keys.length];
		for (int i=0; i<values.length; i++){
			sortedList[i] = keys[i] + " : " + values[i];
		}
		return sortedList;
	}
	
	public Vector<String> findPreassignedProjects(Vector<StudentEntry> allEntries){
		Vector<String> preassignedProjects = new Vector<String>();
		Vector<String> orderedPreferences = new Vector<String>();
		for (int i=0; i<allEntries.size(); i++){
			if(allEntries.elementAt(i).hasPreassignedProject()){
				orderedPreferences = allEntries.elementAt(i).getOrderedPreference();
				preassignedProjects.addElement(orderedPreferences.firstElement());
			}
		}
		return preassignedProjects;
	}
	
	public Vector<String> listOfStudentsNames(){
		Vector<String> studentList = new Vector<String>();
		Vector<StudentEntry> allStudentEntries = new Vector<StudentEntry>();
		allStudentEntries = getAllStuderntEntries();
		for (int i=0; i<allStudentEntries.size(); i++){
			String studentName = allStudentEntries.elementAt(i).getStudentName();
			studentList.addElement(studentName);
		}
		return studentList;
	}
	
	public Vector<String> listOfNonPreAssignedStudents(){
		Vector<String> nonpreAssignedStudents = new Vector<String>();
		Vector<StudentEntry> allStudentEntries = new Vector<StudentEntry>();
		allStudentEntries = getAllStuderntEntries();
		for (int i=0; i<allStudentEntries.size(); i++){
			if (!(allStudentEntries.elementAt(i).hasPreassignedProject())){
				String studentName = allStudentEntries.elementAt(i).getStudentName();
				nonpreAssignedStudents.addElement(studentName);
			}			
		}
		return nonpreAssignedStudents;
	}
	
	public Vector<String> listOfPreAssignedStudents(){
		Vector<String> preAssignedStudents = new Vector<String>();
		Vector<StudentEntry> allStudentEntries = new Vector<StudentEntry>();
		allStudentEntries = getAllStuderntEntries();
		for (int i=0; i<allStudentEntries.size(); i++){
			if (allStudentEntries.elementAt(i).hasPreassignedProject()){
				String studentName = allStudentEntries.elementAt(i).getStudentName();
				preAssignedStudents.addElement(studentName);
			}			
		}
		return preAssignedStudents;
	}	
	
		public void removePreAssignedPreferences(){
		Vector<StudentEntry> allStudentEntries = getAllStuderntEntries();
		Vector<String> studentPreferences = new Vector<String>();
		
		for(int i = 0; i < allStudentEntries.size(); i++){
			studentPreferences = allStudentEntries.elementAt(i).getOrderedPreference();
			for(int j = 0; j < studentPreferences.size(); j++){
				if(preassignedList.contains(studentPreferences.elementAt(j)) && allStudentEntries.elementAt(i).hasPreassignedProject() == false){
					studentPreferences.removeElementAt(j);
				}
			}
		}
	}
	
	
	public Vector<String> findInvalidEntries(){
		Vector<StudentEntry> allStudentEntries = getAllStuderntEntries();
		Vector<String> studentPreferences = new Vector<String>();
		Vector<String> invalidStudents = new Vector<String>();
		
		for(int i = 0; i < allStudentEntries.size(); i++){
			studentPreferences = allStudentEntries.elementAt(i).getOrderedPreference();
			for(int j = 0; j < studentPreferences.size(); j++){
				if(preassignedList.contains(studentPreferences.elementAt(j)) && allStudentEntries.elementAt(i).hasPreassignedProject() == false){
					invalidStudents.addElement(allStudentEntries.elementAt(i).getStudentName());
				}
			}
		}
		return invalidStudents;
	}
	public Vector<String> listStudentsByProject(String project){
		Vector<StudentEntry> allStudentEntries = getAllStuderntEntries();
		Vector<String> studentPreferences = new Vector<String>();
		Vector<String> studentsWithProject = new Vector<String>();
		for(int i=0; i<allStudentEntries.size(); i++){
			studentPreferences = allStudentEntries.elementAt(i).getOrderedPreference();
			if (studentPreferences.contains(project)){
				studentsWithProject.add(allStudentEntries.elementAt(i).getStudentName());
			}
		}
		return studentsWithProject;
	}
	
	
	
	public static void main(String[] args) throws IOException {

	}
}
